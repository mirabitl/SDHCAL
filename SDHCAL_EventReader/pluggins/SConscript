import sys,os,commands
import  os
import re
import sys

# environment
USE_CULA=False
USE_CIMG=False
USE_OPENCV=False

#print "----------------------------------------------"
Decider('MD5-timestamp')
LOCAL_ROOT="/opt/local"
DHCAL_ROOT=os.path.abspath("../..")

# includes
INCLUDES=['.','../include',"/usr/include","/usr/local/include","/usr/local/cuda/include","/usr/local/cula/include","/usr/X11R6/include","/usr/include/jsoncpp"]
#LCIO
INCLUDES.append(os.path.join(os.getenv("LCIODIR"),"include"))
INCLUDES.append(os.path.join(os.getenv("LCIODIR"),"include","IMPL"))
#MYSQL and sqlite
INCLUDES.append(os.path.join(os.getenv("LEVBDIMDIR"),"include"))
INCLUDES.append(os.path.join(os.getenv("DIMDIR"),"dim"))
INCLUDES.append("/usr/include/libxml2")
#eigen3
INCLUDES.append("/usr/local/include/eigen3/")
#python
INCLUDES.append(commands.getoutput("python -c 'import distutils.sysconfig as conf; print conf.get_python_inc()'"))

INCLUDES.append("../../SDHCAL_common/include/")
INCLUDES.append("../../TdcReadout/include/")
#flags
CPPFLAGS=commands.getoutput("$ROOTSYS/bin/root-config --cflags").split(" ") + ["-O4","-DLINUX", "-DREENTRANT" ,"-Dlinux", "-DLITTLE_ENDIAN__", "-Dx86","-DDAQ_VERSION_2","-Wno-deprecated","-std=c++11"] 
if (USE_OPENCV):
	CPPFLAGS.append(commands.getoutput("pkg-config --cflags opencv").split(" "));
	CPPFLAGS.append("-DUSE_OPENCV")
if (USE_CIMG):
	CPPFLAGS.append("-Dcimg_use_vt100")
	CPPFLAGS.append("-DUSE_CIMG")
if (USE_CULA):
	CPPFLAGS.append("-DUSE_CULA")
#Library ROOT + some of XDAQ + DB 
ROOT_LIBS=[lib[2:] for lib in filter(lambda x: (x[:2]=="-l"), commands.getoutput("$ROOTSYS/bin/root-config --libs --ldflags --glibs").split(" "))
]
ROOT_LIBS.append('XMLIO')
ROOT_LIBPATH=[lib[2:] for lib in filter(lambda x: (x[:2]=="-L"), commands.getoutput("$ROOTSYS/bin/root-config --libs ").split(" "))]
#MYSQL
MY_LIBS=[lib[2:] for lib in filter(lambda x: (x[:2]=="-l"), commands.getoutput("mysql_config --libs").split(" "))]
MY_LIBPATH=[lib[2:] for lib in filter(lambda x: (x[:2]=="-L"), commands.getoutput("mysql_config --libs").split(" "))]

#OpenCV
OCV_LIBS=[lib[15:len(lib)-3] for lib in filter(lambda x: (x[:15]=="/usr/local/lib/"), commands.getoutput("pkg-config --libs opencv").split(" "))]


# cc 2706 LIBRARIES=ROOT_LIBS+['pthread', 'toolbox', 'xcept', 'config', 'log4cplus', 'asyncresolv', 'uuid', 'm', 'DHCDBUtils', 'occi', 'clntsh', 'nnz11', 'ilcconfdb', 'dbi','xerces-c', 'ftd2xx', 'stdc++','SDHCALEventReader','ftdi','ftdipp']

#CUDA
CUDA_LIBS=["cula_core","cula_lapack","cublas","cudart"]
CUDA_LIBPATH=[os.getenv("CULA_LIB_PATH_64"),"/usr/local/cula/lib"]


# Summary

LIBRARIES=ROOT_LIBS+MY_LIBS+['SDHCALcommon','pthread', 'lcio','xml2','sqlite3','X11','levbdim',"dim","SDHCALEventReader"]

if (USE_CULA or USE_OPENCV):
	LIBRARIES=LIBRARIES+CUDA_LIBS
if (USE_OPENCV):
	LIBRARIES=LIBRARIES+OCV_LIBS



#Library path XDAQ,DHCAL and ROOT + Python
LIBRARY_PATHS=ROOT_LIBPATH+MY_LIBPATH+["/usr/lib","/usr/local/lib","../lib"]
LIBRARY_PATHS.append(os.path.join(os.getenv("LEVBDIMDIR"),"lib"))
LIBRARY_PATHS.append(os.path.join(os.getenv("DIMDIR"),"linux"))
LIBRARY_PATHS.append(commands.getoutput("python -c 'import distutils.sysconfig as conf; print conf.PREFIX'")+"/lib")
LIBRARY_PATHS.append(os.path.join(os.getenv("LCIODIR"),"lib"))

LIBRARY_PATHS.append("../../SDHCAL_common/lib/")
if (USE_CULA or USE_OPENCV):
	LIBRARY_PATHS=LIBRARY_PATHS+CUDA_LIBPATH


#link flags

LDFLAGS=commands.getoutput("$ROOTSYS/bin/root-config --ldflags").split(" ")
LDFLAGS.append(['-fPIC','-dynamiclib','-rdynamic'])
		      
# Create the Environment
env = Environment(CPPPATH=INCLUDES,CPPFLAGS=CPPFLAGS,LINKFLAGS=LDFLAGS, LIBS=LIBRARIES,LIBPATH=LIBRARY_PATHS)

#print "CC is:",env.subst('$CPPPATH')




#Shared library
lmreco=env.SharedLibrary("lmreco",source=['jsonGeo.cxx','RecoHit.cxx','planeCluster.cxx','hitMonitor.cxx','recoTrack.cxx',"basicreader.cxx","tdcreadbinary.cxx","tdcrb.cxx"])
LIBRARIESPLUG=["lmreco","boost_system"]+LIBRARIES
LIBRARY_PATHS.append(".")

env1 = Environment(CPPPATH=INCLUDES,CPPFLAGS=CPPFLAGS,LINKFLAGS=LDFLAGS, LIBS=LIBRARIESPLUG,LIBPATH=LIBRARY_PATHS)
rawAnalysis=env1.SharedLibrary("rawAnalysis",source=['rawAnalysis.cxx'])
combAnalysis=env1.SharedLibrary("combAnalysis",source=['combAnalysis.cxx'])
trackAnalysis=env1.SharedLibrary("trackAnalysis",source=['trackAnalysis.cxx'])
brAnalysis=env1.SharedLibrary("brAnalysis",source=['brAnalysis.cxx'])
rootProcessor=env1.SharedLibrary("rootProcessor",source=['rootProcessor.cxx'])




EXE_LIBPATH=LIBRARY_PATHS

EXE_LIBS=LIBRARIESPLUG

br=env1.Program("bin/br",source="br.cc",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
tdcr=env1.Program("bin/tdcr",source="tdcr.cc",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)





Default([lmreco,rawAnalysis,trackAnalysis,rootProcessor,combAnalysis,br,brAnalysis,tdcr])




env1.Install("../../opt/dhcal/lib",[lmreco,rawAnalysis,trackAnalysis,rootProcessor,combAnalysis])
env1.Alias('install', ["../../opt/dhcal/lib"])